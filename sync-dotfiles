#!/usr/bin/env bash
# Safe dotfiles sync script - ensures private keys and tokens are never added
# https://github.com/livepatrone/dotfiles

set -euo pipefail

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print functions
info() { echo -e "${BLUE}ℹ️  $1${NC}"; }
success() { echo -e "${GREEN}✅ $1${NC}"; }
warning() { echo -e "${YELLOW}⚠️  $1${NC}"; }
error() { echo -e "${RED}❌ $1${NC}"; }

# Check if we're in the dotfiles directory
check_dotfiles_dir() {
    if [[ ! -f "bashrc" || ! -f "gitconfig" || ! -d ".git" ]]; then
        error "Not in dotfiles directory. Run this from ~/.dotfiles"
        exit 1
    fi
}

# Ensure sensitive files are properly ignored
setup_gitignore() {
    local gitignore=".gitignore"
    local sensitive_patterns=(
        "# SSH and GPG keys"
        "*.pem"
        "*.key"
        "id_rsa*"
        "id_dsa*"
        "id_ecdsa*"
        "id_ed25519*"
        "*.pub"
        ""
        "# Secrets and tokens"
        ".env*"
        "*.token"
        "*.secret"
        "*_token"
        "*_secret"
        "*password*"
        ""
        "# Temporary and backup files"
        "*.bak*"
        "*.tmp"
        "*.swp"
        "*~"
        ""
        "# Local device configs (keep these local)"
        ".local_*"
        "local.*"
        ""
        "# OS and editor files"
        ".DS_Store"
        "Thumbs.db"
        "*.log"
    )

    # Create or update .gitignore
    if [[ ! -f "$gitignore" ]]; then
        info "Creating .gitignore with security patterns"
        printf '%s\n' "${sensitive_patterns[@]}" > "$gitignore"
    else
        # Check if security patterns are present
        if ! grep -q "SSH and GPG keys" "$gitignore" 2>/dev/null; then
            info "Adding security patterns to .gitignore"
            echo "" >> "$gitignore"
            printf '%s\n' "${sensitive_patterns[@]}" >> "$gitignore"
        fi
    fi
}

# Security check - scan for potential secrets before committing
security_check() {
    info "Running security checks..."

    local dangerous_files=()
    local suspicious_content=()

    # Check for common private key files
    while IFS= read -r -d '' file; do
        dangerous_files+=("$file")
    done < <(find . -name "*.pem" -o -name "*.key" -o -name "id_*" -o -name "*.pub" -print0 2>/dev/null)

    # Check for suspicious content in staged files
    if git diff --cached --name-only | grep -v ".gitignore" | xargs grep -l "PRIVATE KEY\|BEGIN RSA\|BEGIN DSA\|BEGIN EC\|BEGIN OPENSSH\|ssh-rsa\|ssh-dss\|ssh-ed25519\|ecdsa-sha2" 2>/dev/null; then
        suspicious_content+=($(git diff --cached --name-only | xargs grep -l "PRIVATE KEY\|BEGIN RSA\|BEGIN DSA\|BEGIN EC\|BEGIN OPENSSH\|ssh-rsa\|ssh-dss\|ssh-ed25519\|ecdsa-sha2" 2>/dev/null))
    fi

    # Report any findings
    if [[ ${#dangerous_files[@]} -gt 0 ]]; then
        error "Found potential private key files:"
        printf '  %s\n' "${dangerous_files[@]}"
        echo
        warning "These files should not be in your dotfiles repository!"
        read -p "Continue anyway? (y/N): " -r
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi

    if [[ ${#suspicious_content[@]} -gt 0 ]]; then
        error "Found files with potential private key content:"
        printf '  %s\n' "${suspicious_content[@]}"
        echo
        warning "Review these files carefully before committing!"
        read -p "Continue anyway? (y/N): " -r
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi

    success "Security check passed"
}

# Stage and commit changes
commit_changes() {
    local hostname=$(hostname)
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local commit_msg="Sync config changes from $hostname - $timestamp"

    info "Staging changes..."

    # Add all tracked files and new files, respecting .gitignore
    git add -A

    # Check if there are any changes to commit
    if git diff --cached --quiet; then
        success "No changes to commit"
        return 0
    fi

    # Show what will be committed
    info "Changes to be committed:"
    git diff --cached --stat
    echo

    # Security check before committing
    security_check

    # Commit changes
    info "Committing changes..."
    git commit -m "$commit_msg"
    success "Changes committed: $commit_msg"
}

# Pull with rebase and push changes
sync_remote() {
    info "Syncing with remote repository..."

    # Fetch latest changes
    git fetch origin

    # Check if we're behind
    local behind_count=$(git rev-list --count HEAD..origin/main 2>/dev/null || echo "0")

    if [[ "$behind_count" -gt 0 ]]; then
        info "Pulling $behind_count new commits from remote..."
        if ! git pull --rebase origin main; then
            error "Failed to rebase. Resolve conflicts manually and run:"
            echo "  git rebase --continue"
            echo "  git push origin main"
            exit 1
        fi
        success "Successfully rebased local changes"
    fi

    # Push changes
    info "Pushing changes to remote..."
    if git push origin main; then
        success "Changes pushed to remote repository"
    else
        error "Failed to push changes. Check your internet connection and GitHub permissions."
        exit 1
    fi
}

# Show repository status
show_status() {
    info "Repository status:"
    git status --short
    echo

    info "Recent commits:"
    git log --oneline -5
    echo
}

# Main sync function
main() {
    echo "🔄 Dotfiles Sync Tool"
    echo "====================="

    check_dotfiles_dir
    setup_gitignore
    show_status

    # Ask for confirmation before proceeding
    read -p "Proceed with sync? (y/N): " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        info "Sync cancelled"
        exit 0
    fi

    commit_changes
    sync_remote

    echo
    success "=== Sync Complete! ==="
    info "Your dotfiles are now synchronized across all devices"
    info "Run 'git pull && ./install.sh' on other machines to get these changes"
}

# Handle command line arguments
case "${1:-sync}" in
    "status"|"st")
        check_dotfiles_dir
        show_status
        ;;
    "check"|"security")
        check_dotfiles_dir
        setup_gitignore
        security_check
        ;;
    "sync"|"")
        main
        ;;
    "help"|"--help"|"-h")
        echo "Usage: $0 [command]"
        echo ""
        echo "Commands:"
        echo "  sync      Sync dotfiles (default)"
        echo "  status    Show repository status"
        echo "  check     Run security checks only"
        echo "  help      Show this help message"
        ;;
    *)
        error "Unknown command: $1"
        echo "Run '$0 help' for usage information"
        exit 1
        ;;
esac
